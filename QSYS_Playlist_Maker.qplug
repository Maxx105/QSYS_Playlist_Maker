-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "My Plugins~Playlist Maker",
  Version = "0.0",
  BuildVersion = "0.0.0.0",
  Id = "1e886705-4f8b-403e-9a2f-02bdb899a0db",
  Author = "QSC",
  Description = "A simple plugin that allows you to create a playlist out of a single audio file"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Playlist Maker\nv" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control "}  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  -- if props.Model ~= nil and props.Model.Value ~= "" then
  --   table.insert(model, { props.Model.Value } )
  -- else
  --   table.insert(model, { "Base Model" } )
  -- end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  -- table.insert(pins,{
  --   Name = "Audio Output",
  --   Direction = "output",
  -- })
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "NextSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "PreviousSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "SubmitSongInfo",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "RemoveSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "UpdateSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "Songs",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AddName",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AddTime",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AudioPlayerSelect",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "ListOfSongs",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AllDirectories",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AllFiles",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Playlist Maker",
    Fill = {200,200,200},
    StrokeWidth = 1,
    Position = {6,5},
    Size = {303,576},
    CornerRadius = 8
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Audio Player:",
    Position = {45,107},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Songs:",
    Position = {45,123},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Directory:",
    Position = {45,139},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "File:",
    Position = {45,155},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Name",
    Position = {35,185},
    Size = {167,18},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Time",
    Position = {202,185},
    Size = {75,16},
    FontSize = 12,
    HTextAlign = "Center"
  })
  -- layout["SendButton"] = {
  --   PrettyName = "Buttons~Send The Command",
  --   Style = "Button",
  --   Position = {105,42},
  --   Size = {50,16},
  --   Color = {0,0,0}
  -- }
  return layout, graphics
end

--Start event based logic
if Controls then
end
