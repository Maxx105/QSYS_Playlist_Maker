-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "My Plugins~Playlist Maker",
  Version = "1.0",
  BuildVersion = "1.0.0.1",
  Id = "5783e46f-c180-4a81-961a-21f605ff5e5f",
  Author = "Maxx Sanner",
  Description = "A simple plugin that allows you to create a playlist out of a single audio file"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Playlist Maker\nv" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control "}  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  -- if props.Model ~= nil and props.Model.Value ~= "" then
  --   table.insert(model, { props.Model.Value } )
  -- else
  --   table.insert(model, { "Base Model" } )
  -- end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  -- table.insert(pins,{
  --   Name = "Audio Output",
  --   Direction = "output",
  -- })
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name = "NextSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1,
    Icon = "Arrow Right"
  })
  table.insert(ctrls, {
    Name = "PreviousSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1,
    Icon = "Arrow Left"
  })
  table.insert(ctrls, {
    Name = "SubmitSongInfo",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1,
    Icon = "Plus"
  })
  table.insert(ctrls, {
    Name = "RemoveSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "UpdateSong",
    ControlType = "Button",
    ButtonType = "Trigger",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "Songs",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AddName",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AddTime",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AudioPlayerSelect",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "ListOfSongs",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AllDirectories",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  table.insert(ctrls, {
    Name = "AllFiles",
    ControlType = "Text",
    UserPin = true,
    PinStyle = "Both",
    Count = 1
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Playlist Maker",
    Fill = {200,200,200},
    StrokeWidth = 1,
    Position = {6,5},
    Size = {303,576},
    CornerRadius = 8
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Audio Player:",
    Position = {45,107},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Songs:",
    Position = {45,123},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Directory:",
    Position = {45,139},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "File:",
    Position = {45,155},
    Size = {82,16},
    FontSize = 12,
    HTextAlign = "Left"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Name",
    Position = {35,185},
    Size = {167,18},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Time",
    Position = {202,185},
    Size = {75,16},
    FontSize = 12,
    HTextAlign = "Center"
  })
  
  layout["NextSong"] = {
    PrettyName = "Buttons~Next Song",
    Style = "Button",
    Position = {160,32},
    Size = {50,50},
    Color = {255,255,255},
    UnlinkOffColor = true,
    OffColor = {124,124,124}
  }
  layout["PreviousSong"] = {
    PrettyName = "Buttons~Previous Song",
    Style = "Button",
    Position = {107,32},
    Size = {50,50},
    Color = {255,255,255},
    UnlinkOffColor = true,
    OffColor = {124,124,124}
  }
  layout["SubmitSongInfo"] = {
    PrettyName = "Buttons~Add Song",
    Style = "Button",
    Position = {35,219},
    Size = {242,25},
    Color = {255,255,255},
    UnlinkOffColor = true,
    OffColor = {124,124,124}
  }
  layout["RemoveSong"] = {
    PrettyName = "Buttons~Remove Song",
    Style = "Button",
    Position = {36,514},
    Size = {242,24},
    Color = {255,255,255},
    UnlinkOffColor = true,
    OffColor = {124,124,124},
    FontSize = 14,
    Legend = "Remove"
  }
  layout["UpdateSong"] = {
    PrettyName = "Buttons~Update Song",
    Style = "Button",
    Position = {36,538},
    Size = {242,24},
    Color = {255,255,255},
    UnlinkOffColor = true,
    OffColor = {124,124,124},
    FontSize = 14,
    Legend = "Replace"
  }
  
  layout["AudioPlayerSelect"] = {
    PrettyName = "Text~Audio Player",
    Style = "ComboBox",
    Position = {117,107},
    Size = {149,16}
  }
  layout["Songs"] = {
    PrettyName = "Text~Songs",
    Style = "ComboBox",
    Position = {117,123},
    Size = {149,16}
  }
  layout["AllDirectories"] = {
    PrettyName = "Text~Directory",
    Style = "ComboBox",
    Position = {117,139},
    Size = {149,16}
  }
  layout["AllFiles"] = {
    PrettyName = "Text~File",
    Style = "ComboBox",
    Position = {117,155},
    Size = {149,16}
  }
  
  layout["AddName"] = {
    PrettyName = "Text~Song Name",
    Style = "Text",
    Position = {35,203},
    Size = {167,16}
  }
  layout["AddTime"] = {
    PrettyName = "Text~Song Time",
    Style = "Text",
    Position = {202,203},
    Size = {75,16}
  }
  
  layout["ListOfSongs"] = {
    PrettyName = "Text~Song List",
    Style = "ListBox",
    Position = {36,254},
    Size = {242,260}
  }
  
  return layout, graphics
end

--Start event based logic
if Controls then
  json = require("rapidjson")
  
  -- Controls
  local songs = Controls.Songs
  local nextSong = Controls.NextSong
  local previousSong = Controls.PreviousSong
  local submitSongInfo = Controls.SubmitSongInfo
  local addName = Controls.AddName
  local addTime = Controls.AddTime
  local audioPlayerSelect = Controls.AudioPlayerSelect
  local listOfSongs = Controls.ListOfSongs
  local removeSong = Controls.RemoveSong
  local updateSong = Controls.UpdateSong
  local allDirectories = Controls.AllDirectories
  local allFiles = Controls.AllFiles
  
  local counter = 1
  local currentSong = ""
  local songsTable = {}
  local listboxSongsTable = {}
  local components = {}
  local audioPlayersTable = {}
  local decodedSongs = {}
  local directories = {}
  local files = {}
  
  function init()
    getJSONDecodedPlaylist()
    populateSongsTable()
    setAudioPlayersTable()
    setAudioPlayerComponent()
    populateDirectories()
    if allDirectories.String ~= nil then
      populateFiles()
    end
  end
  
  function setAudioPlayersTable()
    local songString = ""
    components = Component.GetComponents()
    for i, component in ipairs(components) do
      if (component.Type == "audio_file_player") then
        table.insert(audioPlayersTable, component.Name)
      end
    end
    if #audioPlayersTable >= 1 then
      audioPlayerSelect.Choices = audioPlayersTable
      audioPlayerSelect.String = audioPlayerSelect.Choices[1]
        else if #audioPlayersTable == 0 then
        audioPlayerSelect.Choices = {}
        songs.Choices = {}
        listOfSongs.Choices = {}
        audioPlayerSelect.String = "No detected named audio player"
      end
    end
  end
  
  function populateSongsTable()
    songsTable = {}
    listboxSongsTable = {}
    songTimes = {}
    for i, song in ipairs(decodedSongs) do 
      table.insert(songsTable, song.name)
      table.insert(listboxSongsTable, i..") "..song.name.." - "..song.time.." seconds")
    end
    songs.Choices = songsTable
    listOfSongs.Choices = listboxSongsTable
  end
  
  function getJSONDecodedPlaylist()
    local f = io.open("media/chillMixPlaylists/"..allFiles.String..".json","r")
    if f ~= nil then
      io.input("media/chillMixPlaylists/"..allFiles.String..".json")
      decodedSongs = json.decode(io.read("*a"))
      io.close(f)
      else decodedSongs = {}
    end
  end
  
  function handleCounter(numOne, numTwo, op)
    if counter ~= numOne then
      counter = counter + op
      else counter = numTwo
    end
    if json.encode(decodedSongs) ~= '{}' then
      audioPlayer.locate.Value = decodedSongs[counter].time
    end
  end
  
  function sortSongs(tbl)
    local sortedTable = {}
    table.sort(tbl, function(a,b) return a.time < b.time end)
    for i, song in ipairs(tbl) do
      table.insert(sortedTable, song)
    end
    return sortedTable
  end
  
  function writeFile()
    dir.create("media/chillMixPlaylists")
    io.output("media/chillMixPlaylists/"..allFiles.String..".json")
    io.write(json.encode(sortSongs(decodedSongs)))
    io.close()
    addName.String = ""
    addTime.String = ""
    populateSongsTable()
  end
  
  function deleteSong()
    getJSONDecodedPlaylist()
    local position = string.sub(listOfSongs.String, 1, string.find(listOfSongs.String, ")")-1)
    table.remove(decodedSongs, position)
    writeFile()
  end
  
  function replaceSong()
    if addName.String ~= "" and addTime.String ~= "" then
      getJSONDecodedPlaylist()
      local position = string.sub(listOfSongs.String, 1, string.find(listOfSongs.String, ")")-1)
      table.remove(decodedSongs, position)
      table.insert (decodedSongs, position, {name = addName.String, time = tonumber(addTime.String)})
      writeFile()
    end
  end
  
  function setCurrentSongName()
    for i, song in ipairs(decodedSongs) do
      if audioPlayer.progress.Value >= song.time then
        counter = i
        currentSong = song.name
      end
    end
    songs.String = currentSong
  end
  
  function populateDirectories()
    directories = {}
    directory = "media/Audio"
    temp = dir.get(directory)
    for i, audioDir in ipairs(temp) do
      table.insert(directories, audioDir.name..'/')
    end
    allDirectories.Choices = directories
  end
  
  function populateFiles()
    files = {}
    file = "media/Audio/"..string.sub(allDirectories.String, 1, -2)
    fileTemp = dir.get(file)
    for i, audioFile in ipairs(fileTemp) do
      table.insert(files, audioFile.name)
    end
    allFiles.Choices = files
  end
  
  function setAudioFileStrings()
    if audioPlayer ~= nil then
      allDirectories.String = audioPlayer.directory.String
      allFiles.String = audioPlayer.filename.String
    else
      allDirectories.String = ""
      allFiles.String = ""
    end
  end
  
  function setAudioPlayerComponent()
    songs.String=""
    if audioPlayerSelect.String ~= "No detected named audio player" then
      audioPlayer = Component.New(audioPlayerSelect.String)
      audioPlayer.progress.EventHandler = function()
        if json.encode(decodedSongs) ~= '{}' then
          setCurrentSongName()
        end
      end
      audioPlayer.directory.EventHandler = setAudioFileStrings
      audioPlayer.filename.EventHandler = function()
        setAudioFileStrings()
        getJSONDecodedPlaylist()
        populateSongsTable()
        if json.encode(decodedSongs) == '{}' then
          songs.String = ""
        end
      end
      else audioPlayer = nil
    end
    setAudioFileStrings()
    getJSONDecodedPlaylist()
    populateSongsTable()
  end
  
  nextSong.EventHandler = function()
    handleCounter(#decodedSongs, 1, 1)
  end
  
  previousSong.EventHandler = function()
    handleCounter(1, #decodedSongs, -1)
  end
  
  songs.EventHandler = function()
    for i, song in ipairs(decodedSongs) do
      if songs.String == song.name then
        counter = i
      end
    end
    audioPlayer.locate.Value = decodedSongs[counter].time
  end
  
  submitSongInfo.EventHandler = function()
    if addName.String ~= "" and addTime.String ~= "" and tonumber(addTime.String) then
      getJSONDecodedPlaylist()
      table.insert(decodedSongs, {name = addName.String, time = tonumber(addTime.String)})
      writeFile()
      else 
        addName.String = ""
        addTime.String = ""
    end
  end
  
  audioPlayerSelect.EventHandler = setAudioPlayerComponent
  removeSong.EventHandler = deleteSong
  updateSong.EventHandler = replaceSong
  
  init()
  
  allDirectories.EventHandler = function()
    populateFiles()
    if audioPlayer ~= nil then
      audioPlayer.directory.String = allDirectories.String
    end
    allFiles.String = allFiles.Choices[1]
  end
  
  allFiles.EventHandler = function()
    songs.String = ""
    if audioPlayer ~= nil then
      audioPlayer.filename.String = allFiles.String
    end
    getJSONDecodedPlaylist()
    populateSongsTable()
    audioPlayer.play:Trigger()
  end
end
